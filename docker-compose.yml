
version: '3.8'

services:
  kafka:
    image: bitnami/kafka:3.6.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_MODE: "yes"
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LOG_DIRS: /bitnami/kafka/data
      KAFKA_CLUSTER_ID: my-kafka-cluster
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - backend

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend

  user-service:
    build:
      context: ./user-service
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-user:5432/userdb
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      - postgres-user
    networks:
      - backend

  order-service:
    build:
      context: ./order-service
    container_name: order-service
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-order:5432/orderdb
      SPRING_DATASOURCE_USERNAME: order
      SPRING_DATASOURCE_PASSWORD: password
      USER_SERVICE_URL: http://user-service:8081
    depends_on:
      - user-service
      - postgres-order
      - kafka
    networks:
      - backend

  notification-service:
    build:
      context: ./notification-service
    container_name: notification-service
    depends_on:
      - kafka
    networks:
      - backend

  postgres-user:
    image: postgres:15
    container_name: postgres-user
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - ./user-service/init:/docker-entrypoint-initdb.d
    networks:
      - backend

  postgres-order:
    image: postgres:15
    container_name: postgres-order
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: order
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    volumes:
      - ./order-service/init:/docker-entrypoint-initdb.d
    networks:
      - backend

volumes:
  kafka_data:

networks:
  backend:
    driver: bridge
